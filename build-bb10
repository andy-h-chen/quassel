#!/bin/bash

INSTALL_PREFIX="bb10"

if [ -z "$1" ]; then
    echo "Usage: build-bb10 <path to local qmake>"
    exit 0
else
  OUTPUT=$($1 -v)
  QMAKEVERSION="QMake version"
  if [ "${OUTPUT/$QMAKEVERSION}" = "$OUTPUT" ] ; then
    exit 0
  fi
fi

# Generate CMakeLists.txt for genversion.cpp
BASEDIR=$(dirname $0)
if [[ ! -e $BASEDIR/$INSTALL_PREFIX ]]; then
  mkdir $INSTALL_PREFIX
fi

FILE="$BASEDIR/$INSTALL_PREFIX/CMakeLists.txt"

cat <<EOM >$FILE
cmake_minimum_required (VERSION 2.6)

include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckCXXCompilerFlag)

set(CMAKE_MODULE_PATH \${CMAKE_SOURCE_DIR}/../cmake/modules)
include(QuasselMacros)

find_package(Qt4 \${QT_MIN_VERSION} REQUIRED)
setup_qt_variables()
include_directories(\${QUASSEL_QT_INCLUDES})

add_executable(genversion \${CMAKE_SOURCE_DIR}/../src/common/genversion.cpp)
target_link_libraries(genversion \${QUASSEL_QT_LIBRARIES})
set_target_properties(genversion PROPERTIES COMPILE_FLAGS "\${QUASSEL_QT_COMPILEFLAGS}")

get_target_property(GENVERSION_EXECUTABLE genversion LOCATION)
add_custom_target(genversion_run ALL \${GENVERSION_EXECUTABLE}
                  \${CMAKE_SOURCE_DIR}/../ \${CMAKE_BINARY_DIR}/../src/version.gen)
add_dependencies(genversion_run genversion)

EOM

pushd $INSTALL_PREFIX
cmake -DQT_QMAKE_EXECUTABLE=$1 .
make
popd

# Generate bar-descriptor.xml
FILE="$BASEDIR/$INSTALL_PREFIX/bar-descriptor.xml"

cat <<EOM >$FILE
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<qnx xmlns="http://www.qnx.com/schemas/application/1.0">
    <id>quassel-irc-bb10</id>
    <name>Quassel IRC For BB10</name>
    <versionNumber>1.0.0</versionNumber>
    <buildId>1</buildId>
    <description>Quassel IRC</description>
    <author>Andy H. Chen</author>
    <initialWindow>
        <autoOrients>true</autoOrients>
        <systemChrome>none</systemChrome>
        <transparent>false</transparent>
    </initialWindow>
    <invoke-target id="irc">
        <name>Quassel IRC for BB10</name>
        <icon><image>quassel.png</image></icon>
        <type>APPLICATION</type>
        <filter>
            <action>bb.action.OPEN</action>
            <mime-type>text/plain</mime-type>
        </filter>
    </invoke-target>
    <category>core.games</category>
    <configuration name="Device-Debug">
       <platformArchitecture>armle-v7</platformArchitecture>
       <asset path="bin/quassel" entry="true" type="Qnx/Elf">quassel</asset>
    </configuration>
    <icon>
        <image>quassel.png</image>
    </icon>
    <asset path="share/icons/hicolor/114x114/apps/quassel.png">quassel.png</asset>
    <asset path="share/apps">apps</asset>
    <asset path="assets">assets</asset>   
    <permission system="true">run_native</permission>
    <permission>run_when_backgrounded</permission>
    <permission>access_notify_settings_control</permission>
    <permission>post_notification</permission>
    <env var="LD_LIBRARY_PATH" value="app/native/lib:/usr/lib/qt4/lib"/>
</qnx>

EOM

CPU="armv7le"
CPUDIR="armle-v7"
BUSUFFIX="armv7"

CC_COMMAND="$QNX_HOST/usr/bin/qcc"
BUILDTYPE="Release"

QNX_INCLUDE="$QNX_TARGET/usr/include"
QNX_USR_LIB="$QNX_TARGET/$CPUDIR/usr/lib"
QNX_LIB="$QNX_TARGET/$CPUDIR/lib"

COMP_PATHS=" \
    -Wl,-rpath-link,$QNX_LIB \
    -Wl,-rpath-link,$QNX_USR_LIB"


COMP_PATHS="$COMP_PATHS \
    -Wl,-rpath-link,$QNX_LIB \
    -Wl,-rpath-link,$QNX_USR_LIB"


COMP_PATHS="$COMP_PATHS \
    -L$QNX_LIB \
    -L$QNX_USR_LIB"

if [ "$CCWRAP" ] ; then
    CMAKE_EXTRA_OPTIONS=" \
        -DCMAKE_C_COMPILER_ARG1=qcc \
        -DCMAKE_CXX_COMPILER_ARG1=qcc \
        $CMAKE_EXTRA_OPTIONS"
    CC_COMMAND="$CCWRAP"
fi

EXTRA_FLAGS=" \
    -Wno-psabi \
    -lang-c++ \
    -fstack-protector \
    -fstack-protector-all \
    -mcpu=cortex-a9 \
    -Wno-psabi \
    -Wall \
    -W \
    -D_REENTRANT \
    -DQT_NO_IMPORT_QT47_QML \
    -DQ_OS_BLACKBERRY \
    -DQT_DECLARATIVE_LIB \
    -DQT_SCRIPT_LIB \
    -DQT_SVG_LIB \
    -DQT_SQL_LIB \
    -DQT_XMLPATTERNS_LIB \
    -DQT_XML_LIB \
    -DQT_GUI_LIB \
    -DQT_NETWORK_LIB \
    -DQT_CORE_LIB \
    -DQT_SHARED"

if [ `uname` == "Darwin" ] ; then
    CMAKE_EXTRA_OPTIONS=" \
        -DCMAKE_SKIP_RPATH='ON' \
        $CMAKE_EXTRA_OPTIONS"
fi

if [ "$DEV_BUILD" == "1" ]; then
    CMAKE_EXTRA_OPTIONS=" \
        -DDEV_BUILD=1 \
        $CMAKE_EXTRA_OPTIONS"
fi

if [ ! -z "$PROFILE" ] ; then
    CMAKE_EXTRA_OPTIONS="$CMAKE_EXTRA_OPTIONS -DPROFILING=1"
fi

cmake \
    -DCMAKE_SYSTEM_PROCESSOR="$CPUDIR" \
    -DCMAKE_SYSTEM_NAME="QNX" \
    -DCMAKE_SYSTEM_VERSION="1" \
    -DCMAKE_BUILD_TYPE="$BUILDTYPE" \
    -DCMAKE_C_COMPILER="$CC_COMMAND" \
    -DCMAKE_CXX_COMPILER="$CC_COMMAND" \
    -DCMAKE_C_FLAGS="-Vgcc_nto$CPU -g $COMP_PATHS" \
    -DCMAKE_CXX_FLAGS="-Vgcc_nto${CPU}_cpp-ne -g -lang-c++ $EXTRA_FLAGS $COMP_PATHS" \
    -DCMAKE_INCLUDE_PATH="$QNX_INCLUDE" \
    -DCMAKE_LIBRARY_PATH="$QNX_LIB;$QNX_USR_LIB" \
    -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
    -DCMAKE_AR="$QNX_HOST/usr/bin/nto$BUSUFFIX-ar" \
    -DCMAKE_RANLIB="$QNX_HOST/usr/bin/nto$BUSUFFIX-ranlib" \
    -DCMAKE_LD="$QNX_HOST/usr/bin/nto$BUSUFFIX-ld" \
    -DCMAKE_LINKER="$QNX_HOST/usr/bin/nto$BUSUFFIX-ld" \
    -DECLIPSE_CDT4_GENERATE_SOURCE_PROJECT=TRUE \
    -DWITH_KDE=OFF \
    -DWITH_OXYGEN=OFF \
    -DWITH_SYSLOG=ON \
    -DWITH_PHONON=OFF \
    -DWANT_CORE=OFF \
    -DWANT_CLIENT=OFF \
    -DWANT_MONO=ON \
    -DEMBED_DATA=ON \
    -G"Eclipse CDT4 - Unix Makefiles" \
    $CMAKE_EXTRA_OPTIONS \
    $3 
